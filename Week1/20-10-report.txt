Advance SQL:

	SELECT A.AGENT_CODE, A.AGENT_NAME, COUNT(O.ORD_NUM) AS OrderCount
	FROM AGENTS A
	LEFT JOIN ORDERS O ON A.AGENT_CODE = O.AGENT_CODE
	GROUP BY A.AGENT_CODE, A.AGENT_NAME;
	
	SELECT C.CUST_NAME, SUM(O.ORD_AMOUNT) AS TotalRevenue
	FROM CUSTOMER C
	LEFT JOIN ORDERS O ON C.CUST_CODE = O.CUST_CODE
	GROUP BY C.CUST_NAME;
	
	SELECT C.CUST_NAME, C.OUTSTANDING_AMT
	FROM CUSTOMER C
	WHERE C.OUTSTANDING_AMT = (
	    SELECT MAX(OUTSTANDING_AMT)
	    FROM CUSTOMER
	);


	SELECT A.AGENT_CODE, A.AGENT_NAME
	FROM AGENTS A
	LEFT JOIN ORDERS O ON A.AGENT_CODE = O.AGENT_CODE
	WHERE O.ORD_NUM IS NULL;

	SELECT C.CUST_NAME, (C.OPENING_AMT + C.RECEIVE_AMT - C.PAYMENT_AMT) AS TotalPaymentAmount
	FROM CUSTOMER C
	ORDER BY TotalPaymentAmount DESC
	LIMIT 3;

	SELECT A.COUNTRY, AVG(AG.COMMISSION) AS AvgCommission
	FROM AGENTS A
	LEFT JOIN AGENTS AG ON A.COUNTRY = AG.COUNTRY
	GROUP BY A.COUNTRY;

	SELECT C.CUST_NAME, O.ORD_DESCRIPTION
	FROM CUSTOMER C
	JOIN ORDERS O ON C.CUST_CODE = O.CUST_CODE
	WHERE O.ORD_DESCRIPTION LIKE '%important%';

	SELECT C.CUST_NAME, SUM(O.ORD_AMOUNT) AS TotalRevenue
	FROM CUSTOMER C
	JOIN ORDERS O ON C.CUST_CODE = O.CUST_CODE
	WHERE C.CUST_COUNTRY = 'USA'
	GROUP BY C.CUST_NAME;



OOP in Ruby:
	
	Inheritance: Ruby doesn't support Multiple level of inheritances but Ruby supports mixins. 
		
		Example:
		
			module A
			   def a1
			   end
			   def a2
			   end
			end
			module B
			   def b1
			   end
			   def b2
			   end
			end

			class Sample
			include A
			include B
			   def s1
			   end
			end


	Polymorphism: Method Overriding: simply predfine it in the sub class
		
	Encapsulation: define getter and setter to provide public method to acess class information
	
	Abtraction: Ruby doesn't have explicit keywords for defining abstract classes or methods. We can define a "abtract" class like a base class.
	
	Operator Overloading:	

