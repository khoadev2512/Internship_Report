\GIT COMMAND

1. Login

	step1: Generate a ssh key:		ssh-keygen -t rsa -b 4096 -C "khoa.nguyencse.npng@hcmut.edu.vn"

	step2: Add SSH Key to SSH Agent:	eval "$(ssh-agent -s)" 
						
						ssh-add ~/.ssh/id_rsa

	step3: Copy Public Key to Github:	Go to github "setting" > "SSH and GPG keys" and add your ssh key. Get key by: cat ~/.ssh/id_rsa.pub
								
	step4: Set config:			Tell git who you are by running cmd:
	
							git config --global user.email "you@example.com"
  							
  							git config --global user.name "Your Name"


2. Repository Management

	a. git init: 	create a new Git repository

	      usage:	- step1: go to directory you want to create  Git repository
	      		- step2: run "git init" (this will create a .git file to track changes and maintain version of the project
		
	b. git clone:
		- Clone with HTTPS: by this way, you must enter username and password to authenticate
							
			Ex: git clone https://github.com/khoadev2512/Synthesis-project-SE.git	
						
		- Clone with SSH: to make it easier, add "GitHub's SSH key fingerprints" to your "~/.ssh/known_hosts" file
							
			Ex: git clone git@github.com:khoadev2512/Synthesis-project-SE.git 
			
	c. git remote: Manage set of tracked repositories 
		
		git remote    				# List the remote connections you have to other repositories.
		
		git remote -v				# List with URL 
		
		git remote add origin <URL>		# Add a new remote repository with a URL
		
		git remote rename old-name new-name	# Rename an existing remote repository

		git remote set-url remote-name new-URL  # Change the URL of an existing remote repository
		
		git remote remove remote-name		# Remove an existing remote repository

			   
			   
	d. git fetch:
		
		git fetch 		# fetches new branches, tags, and changes from the remote repository without making any changes to your working directory
		
		git fetch --all		# fetch changes from all remote repositories configured in your local repository

	e. git push: 
		
		git push <remote> <branch> 		# push your local changes to a remote repository
		
		git push origin master			# push your local changes to the same branch on the remote repository
		
		git push origin feature-branch:main	# pushes your local "feature-branch" to the "main" branch on the remote
		
		git push --all origin			# push all branches to the remote repository
		
		git push -f origin branch-name		# force push: overwrites the remote branch with your local branch
			
	f. git pull:
		
		git pull					# pull changes from the default remote branch into your current local branch
		
		git pull origin feature-branch			# pull changes from a specific branch on a remote
		
		git pull --rebase origin feature-branch 	# pull and rebase changes
		 
3. Working with Commits

	a. git commit:
		
		git commit -m "Your commit message here"	# create a new commit with message
		
	b. git status:
		
		git status		# display information about the current state of your repository
		
	c. git diff:
		
		git diff			# see the differences between the files in your working directory and the last commit
		
		git diff branch_1..branch_2	# compare two branches to see the differences between them
		
		git diff filename		# see changes in a specific file, provide the filename as an argument
	
	d. git log:
	
		git log 		    # basic log, display a list of commits
		
		git log --max-count=5	    # limit the number of commits shown
		
		git log branch_name	    # view the commit history of a specific branch
		
		git log file_path	    # view the commit history of a specific file
		
		git log --graph		    # show a graphical representation of the commit history
		
		git log --author="John Doe" # filter commits by a specific
		
		git log -p		    # include the changes introduced by each commit
		
	e. git blame:
	
		git blame file_name	# display the commit and author information for each line of a file
		
4. Branch and Merging

	a. git branch
	
		git branch			# list all branches in your Git Repository
		
		git branch branch_name  	# create a new branch
		
		git branch -m new_branch_name  	# renames the current branch to the new name
		
		git branch -d branch_name	# delete a branch safely
		
		git branch -D branch_name	# force delete a branch
		
		git branch -r			# list remote branches (branches on a remote repository)
		
		git branch -a			# view both local and remote branches
	
	b. git checkout
		
		git checkout branch_name 		# switch to a different branch
		
		git checkout -b new_branch_name		# Create and Switch to a New Branch

		git checkout -- file-name		# discard changes in the working directory for a specific file 
		
	c. git merge
		
		git merge feature-branch	# merge changes from one branch into the current branch

	d. git rebase
		git rebase <base-branch>	# rebase your current branch onto a different branch
		
		git rebase -i main		# modify, squash, or reorder commits during the rebase process
		
		git rebase --autostash main	# automatically stash and restore your changes during the rebase

		

5. Tagging
	a. git tag
	
6. Undoing Changes
	a. git reset
	b. git revert
	c. git stash

7. Other
	a. git submodule
	b. git config
	
	
#######################################################################################################################
HOMEWORK
	
						
Question 1: Different between rebase and merge in git

	git merge and git rebase are two different Git commands used to integrate changes from one branch into another, and they have distinct approaches to managing commit history. 

	Git Merge:
		
		Commit History:

			Preserves the commit history of the source branch. It creates a new merge commit, which combines the histories of both branches.
			
			Results in a more complex and non-linear commit history, with multiple merge commits.

		Conflict Resolution:

			Automatically creates a merge commit if there are conflicts between the source and target branches. Conflicting changes are clearly marked for resolution.

			Easier to handle conflicts, as Git guides you through the resolution process.

		Branch Cleanup:

			Does not remove the source branch. The branch continues to exist after the merge.

		Use Cases:

			Typically used for integrating feature branches into a main branch.

			Good for preserving the historical context of changes and branching.
			
	
	Git Rebase:
		
		Commit History:

			Rewrites the commit history of the source branch. It moves or replays the source branch's commits on top of the target branch, creating a linear sequence of commits.

			Results in a cleaner and more linear commit history, with no merge commits.

		Conflict Resolution:

			Pauses the rebase process when conflicts occur, allowing you to resolve conflicts in each commit separately.
	
			Requires manual conflict resolution for each conflicting commit, which can be more work for larger conflicts.

		Branch Cleanup:

			Doesn't preserve the source branch. The source branch's commits are effectively "transplanted" onto the target branch.

			The source branch can be deleted if it's no longer needed, as it's effectively replaced by the rebased branch.

		Use Cases:

			Useful for creating a clean and linear commit history, especially for feature branches or topic branches.
			
			Helpful when you want to integrate changes from the target branch and present them as a continuous sequence of commits without merge commits.
			
			
			
			
			
Question2: Learn about git chery-pick
	
	git cherry-pick command is used to apply specific commits from one branch to another. This allows you to pick and choose individual commits and apply them to your current branch
	
	Syntax:
		
		git cherry-pick <commit-hash>						# Cherry-Pick a Single Commit
		
		git cherry-pick <commit-hash-1> <commit-hash-2> <commit-hash-3>		# Cherry-Pick Multiple Commits
		
		git cherry-pick A^..B							# Cherry-Pick a Range of Commits
		
		git cherry-pick --continue						# Continue to chery-pick after resolve conflicts
		
		git cherry-pick -e <commit-hash>					# Automatically open the commit message for editing before applying the commit
