1.ls: 
	ls [option]	 # list files and directories
	    -a, all  # list all files
	    -R	     # lists all the files in the subdirectories.
	    -lh	     # list all files information: date created, onwer, size, permissions
	    -l	     # list informations of all files (permissions, date created, owner, size)
	     
2. pwd:
	pwd [option]	#print current working directory’s path
	    -L		#prints environment variable content, including symbolic links
	    -P		#prints environment variable content, avoiding symbolic links

	
3. cd: 
	cd - 			# move to the parent directory
	cd [directory-name]	# move to the directory
	cd  ~[username]		# goes to another user’s home directory

4. mkdir:
	mkdir [option] 		   [directory_name]  	  # create one or multiple directories and set their permissions
	      -m[PERMISSIONSCODE]		  	  # set folder permissions-p direct1/[new-directoty]/direct2  # creates a directory between two existing folders.
	      -v				  	  # print message for each created directory
	      -p direct1/[new-directoty]/direct2  # creates a directory between two existing folders.
	
5. rmdir: 
	rmdir [option] 			  directory_name	# delete an empty directory
	      --ignore-fail-on-non-empty			# ignore each failure that is solely because a directory is non-empty
	      -p, --parents					# remove DIRECTORY and its ancestors
	      -v, --verbose                     		# output a diagnostic for every directory processed
	      
6. rm: 
	rm [option] [filename1] [filename2] [filename3]	# permanently delete files within a directory
	   -i 						# prompts a confirmation before deletion
	   -f						# allows file removal without a confirmation
	   -r						# deletes files and directories recursively

7. cp:
	cp [files/directories] [new_dest]	# copy files and directories to the new destination
	cp [filename1] [filename2]		# copy a file's content to another within the same directory
	
8. mv: 
	mv [option] [filename] [copy_address]	# move a file to new address
	   -f					# do not prompt before overwritting
	   -i					# prompt before overwritting
	   -n					# do not overwrite an existing file
	mv [filename] [new-filename]		# rename a file
	mv -R [source] [dest]			# duplicate an entire directory

9. touch: 
	touch [filename]			 # create a file in current directory
	touch /path-to-specific-directory/[file] # create a file in a specific directory
	
10. file:
	file [option] [filename] 	# check a file type
	     -k 			# display more detailed information
	     -i				# show the file’s MIME type
11. zip, unzip:
	zip [option] zipfile file1 fil2... # compress items into a ZIP file.
	    -m				   # move to zip file and delete it in current directory
	    -e				   # compress files with password
	    
	unzip [option] file_name.zip	   # extract the compress file
	      -l			   # list all files in zip
	      -n			   # extract but never overwrite existing file
	      -t			   # test compress
12. tar:
	tar -cf archive.tar file1 file2  # Create archive.tar from files: file1 and file2.
  	tar -tvf archive.tar         	 # List all files in archive.tar verbosely.
  	tar -xf archive.tar          	 # Extract all files from archive.tar.
  	
13. nano, vim:
 	nano filename
 	vi   filename		#both are Linux's text editor
 	
14. cat:
 	cat filename.txt		    # show the contents of file
 	cat > filename.txt		    # create a new file and write its contents
 	cat file1.txt file2.txt > file3.txt # merge file1 with file2 and write output to file3

15. grep:
	grep [option]	PATTERNS [file/files]	    # search for PATTERNS in each file
	     -w				    	    # match only whole words
	     -m[NUM]			    	    # stop search after NUM of lines
	     -n				    	    # print line number with output lines 
	     -c					    # print only a count of selected lines per FILE
	     -l					    # print filename with matchs pattern
	     -L					    # print filename without matchs pattern

16. sed:
	sed [option] 'script' input_file 	# find, replace, delete pattern in a file
	    -i					# save the changes
		     'script' = 's/pattern/replacement/g	# replace matching pattern
		              = '{num-line}d'			# delete the specific line

17. head:
	head [OPTIONS] [FILENAME]	# Display the first 10 lines of the input
	     -n				# Display the first N lines of the input
	     
18. tail:
	tail [OPTIONS] [FILENAME]	# Display the last 10 lines of the input
	     -n				# Display the last N lines of the input
	    
19. sort:
	sort [OPTIONS] [filename]	# sort the lines in a file in ascending order
	     -r				# sort the lines in a file in descending order
	     -n				# sort lines as numerical values
	     -u				# sort lines and remove duplicates
	     		file1 file2...  # sort multiple files simultaneously
	     		
20. diff:
	diff [OPTIONS] file1 file2	# compares two files’ content and outputs the differences
	     -c	      			# displays the difference between two files in a context form
	     -u				# shows the output without redundant information
	     -i				# makes the diff command case insensitive
	     
21. cut:
	cut [OPTIONS]  [filename]	# extract specific columns or fields from lines of text 
	    -d',' -f3  input.csv 	# extracts the third field from each line in "input.csv"
	    -c5-10     input.txt	# extracts characters 5 to 10 from each line in "input.txt"

22. tee:
	command | tee [option] file1	# write result of the command to the file
		      -a		# append to the given FILEs, do not overwrite
		      -i		# ignore interrupt signals
23. find:
	find [directory]     [OPTIONS] [expression] 	# search for files within a specific directory
	     /path/to/search -name     "filename.txt"   # searches for files named "filename.txt" starting from the specified directory
	     /path/to/search -type 	f		# search for files of a specific type (f is "regular files")
	     /path/to/search -user      username  	# find files owned by a specific user
	
24. locate:
	locate [OPTIONS] PATTERN	# quickly search and locate files and directories
	       -e			# search for files only
	       -i			# perform case-sensitive search
	       -l [num]			# limit the number of results
	       
25. sudo:
	sudo (command)			# runs your command with administrative or root permissions

26. su:
	su [options] [username [argument]] 	# run a program in the Linux shell as a different user
	   -p					# keeps the same shell environment, consisting of HOME, SHELL, USER, and LOGNAME
	   -s					# lets you specify another shell environment to run
	   -l					# runs a login script to switch users. It requires you to enter the user’s password
	   
27. chmod:
	chmod [option] [permission] [file_name]		# modifies directory or file permissions in Linux
	      -R					# change permissions recursively for a directory and its contents
	      		700				# pemission can be code or word
	      		+x				# add execute permission to onwer
	      		g+x				# add execute permission to group
	      		o-x				# remove execute permission from other user	

28. chown:
	chown [option] owner[:group] file(s)		# change a file, directory, or symbolic link’s ownership to the specified username
	      -v					# output a diagnostic for every file processed
	      -c					# like verbose but report only when a change is made
	      
29. useradd, userdel:
	sudo useradd [option] 		username	# create a new Linux user account
		     -d /path/to/home			# specify a different location for the home directory for new user
		     -s /bin/bash 			# specify the new user's login shell 
		     -G [groupname]			# add new user to a group
		     
	passwd username					# change new user password
	
	userdel	username				# delete the user
	
30. df:
	df [options] [file]		# check a Linux system’s disk space usage in percentage and kilobyte (KB)
	   -m				# displays information on the file system usage in MBs
	   -k				# prints file system usage in KBs
	   -T				# shows the file system type in a new column
	   
31. du:
	du [OPTIONS] /path-to-folder	# check a file or directory’s storage consumption
	   -s				# shows the specified folder’s total size
	   -m				# provides folder and file information in MB
	   -k				# displays information in KB
	   -h				# informs the displayed folders and files’ last modification date

32. top, htop: 
	top				# displays running processes and the system’s real-time condition, including resource utilization
	
	htop				# likes htop but provide a easier program for user to user (mouse support)

33. ps:
	ps [OPTIONS]			# creates a snapshot of all running processes in your system
	   -u username			# lists processes associated with a specific user
	   -A				# show all the running processes
34. uname:
	uname -asn		# prints all the system information, outputs the kernel name, shows the system’s node hostname	
	
35. time: 
	time (command/command1, command2)		# measure commands’ execution time
	
36. systemctl:
	systemctl start   service_name	# start a service
		  stop 	         	# stop a service
	          restart               # restart a service
	          reload		# reload a service without turn off it
	
	systemctl list-units --type=service	# List All Services and Their Status
	
37. ping:
	ping [option] [hostname_or_IP_address]	# check whether a network or server is reachable

38. watch:
	watch [OPTIONS] COMMAND
	      -n [sec]			# specify the time interval (in seconds) at which watch runs the specified command.
	      -d			# highlights the differences between successive runs of the command
	      
39. kill: 
	kill PID			# terminate an unresponsive program using its identification number (PID)

40. shutdown:
	shutdown [option] [time] "message"	# turn off or restart your system at a specific time 

41. wget:
	wget [OPTIONS] 		 [URL]		# download files from internet
	     -O	/path/file.txt			# specific the output filename and directory
	     -c					# continue downloading a partially downloaded file
	     
42.curl:
	curl [option] URL		# retrieving a web page’s content to your system using its URL, transfers data between servers
	     -o, -O			# download files from a URL
	     -H				# send a custom header to the URL
	     -F				# uploads a file to the specified destination
	  
43.ipconfig:

44. alias: 
	alias name=string	# instructs the shell to replace a string with another
	
	unalias [alias_name]	# delete an existing alias	
	
45. ssh-keygen:
	ssh-keygen -t rsa -b 4096 -C "your_email@example.com" -f [KEY_FILENAME]

46. scp:
	scp /path/to/source/file.txt /path/to/destination/	# copy a file from a source to destination

	
	scp [LOCAL_FILE] [USER]@[REMOTE_HOST]:[REMOTE_DEST]	# Copy a file from your local system to a remote system
	
	scp [USER]@[REMOTE_HOST]:[REMOTE_FILE] [LOCAL_DEST]	# Copy a file from a remote system to your local system


	
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	
Step to make user access to a cloud service:

1. Get user public key
   
2. Paste the public key to the ~/.ssh/authorized_keys

3. grant permission to the '~/.ssh' directory and 'authorized_keys' file
	chmod 700 ~/.ssh
		
	chmod 600 ~/.ssh/authorized_keys

4. After that user can access to the server through cmd:

	ssh user@server_ip
	or
	ssh -i path_to_your_ssh_private_key user@server_ip
	
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Git cmd:

	git init [project-directory]		# Initializes a new Git repository in the specified directory, creating a .git subdirectory to store Git-related information
	
              
	          
	

	
	    
	
			    
	     
	     
	     
	


